
Функция СведенияОВнешнейОбработке() Экспорт
  
  ПараметрыРегистрации = Новый Структура;
  ПараметрыРегистрации.Вставить("Вид", "ЗаполнениеОбъекта"); 
  
  МассивНазначений = Новый Массив();
  МассивНазначений.Добавить("Документ.СчетНаОплатуПокупателю");
  МассивНазначений.Добавить("Документ.РеализацияТоваровУслуг");
  МассивНазначений.Добавить("Документ.АктОбОказанииПроизводственныхУслуг");
  
  ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
  
  ПараметрыРегистрации.Вставить("Наименование", 	"Отправка печатных форм в telegram chat");
  ПараметрыРегистрации.Вставить("Версия", 			"1.5"); 
  ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь); 
  ПараметрыРегистрации.Вставить("Информация", 		"Формирование печатной формы, сохранение в pdf и отправка в telegram chat");
  ПараметрыРегистрации.Вставить("ВерсияБСП", 		"2.2.1.4");

  ТаблицаКоманд = ПолучитьТаблицуКоманд();

  ДобавитьКоманду(ТаблицаКоманд,
          "Сформировать и отправить в Telegram chat",
          "СформироватьИОтправитьВТелеграмм",
          "ОткрытиеФормы",     
          Ложь, 
          ""); 

  ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

  Возврат ПараметрыРегистрации;

КонецФункции

Функция ПолучитьТаблицуКоманд()

  Команды = Новый ТаблицаЗначений;
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

  Возврат Команды;

КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#Область Вспомогательные

Функция ПолучитьИмяФайла(Знач СинонимМакета, Контрагент) Экспорт 
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, %2", СинонимМакета, Контрагент); 
КонецФункции //ПолучитьИмяФайла

Функция ПолучитьИмяМакетаПоМетаданным(Знач ОбъектНазначения) Экспорт
	
	Таблица 					= ОбщегоНазначения.ИмяТаблицыПоСсылке(ОбъектНазначения);
	Построитель 				= Новый ПостроительОтчета;                          	
	ПараметрыПолученияДанных 	= ПолучитьМакет("ПараметрыПолученияДанных");
	
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(
		ПараметрыПолученияДанных.Область(
			1,
			1,
			ПараметрыПолученияДанных.ВысотаТаблицы,
			ПараметрыПолученияДанных.ШиринаТаблицы));
			
	Построитель.Выполнить();
	
	НайденныеСтроки = Построитель.Результат.Выгрузить().НайтиСтроки(Новый Структура("ТаблицаМетаданных", Таблица));	
	
	Если НайденныеСтроки.Количество() > 1 
		Или НайденныеСтроки.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Ошибка поиска макета для %1, найдено: %2 макетов. Обратитесь к разработчику", Таблица, НайденныеСтроки.Количество());
	КонецЕсли; 
	
	Возврат НайденныеСтроки[0].Макет;
	
КонецФункции //ПолучитьИмяМакетаПоМетаданным

Функция ПолучитьИдентификаторПолучателя(Знач Организация) Экспорт
	     
	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	СписокСвойствИДополнительныхРеквизитов = МодульУправлениеСвойствами.ПолучитьСписокСвойств(Организация, Истина, Ложь);
	ИдентификаторЧата = Неопределено;
	
	Для каждого ДополнительныйРеквизит Из СписокСвойствИДополнительныхРеквизитов Цикл		
		Если ВРег(ДополнительныйРеквизит.Имя) = ВРег("Id_group_tlg_6ce25f9944f34cdf82351d0fe7d7dc39") Тогда	// здесь указывается имя дополнительного реквизита		 
			ИдентификаторЧата = ДополнительныйРеквизит;
			Прервать;			
		КонецЕсли;   		
	КонецЦикла; 
	
	Если ИдентификаторЧата = Неопределено Тогда	
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"У организации %1 не установлен дополнительный реквизит CHAT_ID", Организация);		
	КонецЕсли; 
	
	ТаблицаЗначенийСвойства = МодульУправлениеСвойствами.ПолучитьЗначенияСвойств(
		Организация, 
		Истина, 
		Ложь, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторЧата));
		
	Если Не ТаблицаЗначенийСвойства.Количество() Тогда
		ВызватьИсключение нСтр("ru = 'Неожиданные проблемы с получением значения идентификатора чата'");
	КонецЕсли; 
	
	Возврат Формат(ТаблицаЗначенийСвойства[0].Значение,"ЧДЦ=0; ЧГ=");	
	                                    
КонецФункции //ПолучитьИдентификаторПолучателя

Функция ОтправитьФайл(Знач ИдентификаторПолучателя,ДвоичныеДанные, ИмяФайла = "", Сообщение = "") Экспорт 

	//https://gist.github.com/PlugFox/4499132c45b73ae5bc8dda52a1218dff
	
	// Сформировать тело запроса
    Разделитель     = Строка(Новый УникальныйИдентификатор());
    
    // Формируем основное составное сообщение
    Тело            = Новый ПотокВПамяти();
    ЗаписьДанных    = Новый ЗаписьДанных(Тело, КодировкаТекста.UTF8, ПорядокБайтов.LittleEndian, Символы.ВК + Символы.ПС, Символы.ПС, Истина);
    
    // chat_id
    ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
    ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""chat_id""");
    ЗаписьДанных.ЗаписатьСтроку("");
    ЗаписьДанных.ЗаписатьСтроку(ИдентификаторПолучателя);
    
    // disable_notification
    ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
    ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""disable_notification""");
    ЗаписьДанных.ЗаписатьСтроку("");
    ЗаписьДанных.ЗаписатьСтроку("True");
        
    Если Не ПустаяСтрока(Сообщение) Тогда 
        // caption
        ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
        ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""caption""");
        ЗаписьДанных.ЗаписатьСтроку("");
        ЗаписьДанных.ЗаписатьСтроку(Сообщение);        
        
        // parse_mode
        ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
        ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""parse_mode""");
        ЗаписьДанных.ЗаписатьСтроку("");
        ЗаписьДанных.ЗаписатьСтроку("HTML");
    КонецЕсли;
    
    // document    
    ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
    ЗаписьДанных.ЗаписатьСтроку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Content-Disposition: form-data; name=""document""; filename=""%1.pdf""", ?(ПустаяСтрока(ИмяФайла), "document_" + Строка(Новый УникальныйИдентификатор()) + ".pdf", ИмяФайла)));
    ЗаписьДанных.ЗаписатьСтроку("Content-Type: application/pdf");
    ЗаписьДанных.ЗаписатьСтроку("");   
    //ЗаписьДанных.Закрыть();    
    
    // Добавим файл
    //ЗаписьДанных    = Новый ЗаписьДанных(...);
    ЗаписьДанных.Записать(ДвоичныеДанные);
    //ЗаписьДанных.Закрыть();
    
    // Завершение записи
    //ЗаписьДанных    = Новый ЗаписьДанных(Тело, КодировкаТекста.UTF8, ПорядокБайтов.LittleEndian, Символы.ВК + Символы.ПС, Символы.ПС, Ложь);
    ЗаписьДанных.ЗаписатьСтроку("");
    ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
    ЗаписьДанных.Закрыть();
    
    ДанныеТела          = Тело.ЗакрытьИПолучитьДвоичныеДанные();   

    // Сформировать соединение и запрос
    Соединение  = ПолучитьСоединение();
    Заголовки   = Новый Соответствие;
    Заголовки.Вставить("Content-Type",      "multipart/form-data; boundary=" + Разделитель);
    Заголовки.Вставить("Accept",            "*/*");
    Заголовки.Вставить("Cache-Control",     "no-cache");
    Заголовки.Вставить("Host",              "api.telegram.org");
    Заголовки.Вставить("Accept-Encoding",   "gzip, deflate");
    Заголовки.Вставить("Content-Length",    Формат(ДанныеТела.Размер(), "ЧДЦ=0; ЧН=0; ЧГ=0"));
    Заголовки.Вставить("Connection",        "close");
    Адрес       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("/bot%1/sendDocument", ПолучитьAPIToken());
    Запрос      = Новый HTTPЗапрос(Адрес, Заголовки);
    Запрос.УстановитьТелоИзДвоичныхДанных(ДанныеТела);

    // POST
    Ответ       = Соединение.ОтправитьДляОбработки(Запрос);

    // Разбор ответа
    Если Ответ.КодСостояния <> 200 Тогда
        ОтветСтрокой    = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
        ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ошибка отправки вложения в телеграм.
            |Код состояния: %1
            |Тело: %2"
            , Ответ.КодСостояния
            , ОтветСтрокой
        ); 
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

Функция ПолучитьAPIToken() Экспорт
	
	СтрокаJSON = ПолучитьМакет("ДанныеАвторизации").ПолучитьТекст();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	СтруктураПараметров = ПрочитатьJSON(ЧтениеJSON,Ложь);
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураПараметров.APItoken;
	
КонецФункции //ПолучитьAPIToken

Функция ПолучитьСоединение() Экспорт   
	
	SSL         = Новый ЗащищенноеСоединениеOpenSSL();
    Соединение  = Новый HTTPСоединение("api.telegram.org", 443,,,, 30, SSL, Ложь); 
    Возврат Соединение;
	
КонецФункции // ПолучитьСоединение()


#КонецОбласти