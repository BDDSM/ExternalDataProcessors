#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		ПараметрыСтрокой = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПараметрыАвторизации").ПолучитьТекст();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПараметрыСтрокой);
	ПараметрыАвторизации = ПрочитатьJSON(ЧтениеJSON,Ложь);
	ЧтениеJSON.Закрыть();

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Задачи

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НазначитьЗадачу(Команда) 
	
	HTTPConnection = New HTTPСоединение(ПараметрыАвторизации.SERVER,443,,,,30,Новый ЗащищенноеСоединениеOpenSSL,Ложь);
	headers 		= Новый Соответствие;
	headers.Вставить("Content-Type","application/json;charset=UTF-8");
	headers.Вставить("Authorization",ПолучитьСтрокуАвторизации(Логин));	
	
	АдресРесурса 	= "/rest/api/2/issue";
	HTTPЗапрос 		= Новый HTTPЗапрос(АдресРесурса, headers);
	
	МассивУспешныхЗадач = Новый Массив;	
	Для каждого ПользовательПроекта Из ПользователиПроекта Цикл 		
		
		Если ПользовательПроекта.isActive Тогда 			
			
			ПараметрыIssue = Новый Структура;
			ПараметрыIssue.Вставить("assignee",ПользовательПроекта.accountId);
			ПараметрыIssue.Вставить("customfield_10073", Заказчик);
			
			IssueСтрокой = IssueСтрокой(ПараметрыIssue);
			
			HTTPЗапрос.УстановитьТелоИзСтроки(IssueСтрокой);
			HTTPОтвет 		= HTTPConnection.ОтправитьДляОбработки(HTTPЗапрос);
			
			Если HTTPОтвет.КодСостояния >= 400 Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ""+HTTPОтвет.ПолучитьТелоКакСтроку();
				Сообщение.Сообщить();	
				
			ИначеЕсли HTTPОтвет.КодСостояния = 201 Тогда	
				
				// переместить задачу в Спринт
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
				JSONОтвет = ПрочитатьJSON(ЧтениеJSON,Истина);
				ЧтениеJSON.Закрыть();                                 
				
				МассивУспешныхЗадач.Добавить(JSONОтвет.Получить("key"));			
				
			КонецЕсли;		
			
		КонецЕсли;    	
		
	КонецЦикла;       	
	
	Если МассивУспешныхЗадач.Количество() Тогда // есть записи  		
		
		issuesToMove = Новый Структура;                             
		issuesToMove.Вставить("issues",МассивУспешныхЗадач);        	
		АдресРесурсаПеремещения = "/rest/agile/1.0/sprint/{sprintId}/issue"; // https://docs.atlassian.com/jira-software/REST/7.3.1/#agile/1.0/sprint-moveIssuesToSprint
		АдресРесурсаПеремещения = СтрЗаменить(АдресРесурсаПеремещения,"{sprintId}",Sprint);		
		
		HTTPЗапросПеремещения = Новый HTTPЗапрос(АдресРесурсаПеремещения, headers);		
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON,issuesToMove);	
		
		HTTPЗапросПеремещения.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
		HTTPОтвет 	= HTTPConnection.ОтправитьДляОбработки(HTTPЗапросПеремещения);	
		
		Если Не HTTPОтвет.КодСостояния = 204 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ""+HTTPОтвет.ПолучитьТелоКакСтроку();
			Сообщение.Сообщить(); 
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Задачи успешно созданы";
			Сообщение.Сообщить(); 
			
		КонецЕсли; 
		
		
	КонецЕсли;     	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПользователей(Команда)
	
	HTTPConnection = New HTTPСоединение(ПараметрыАвторизации.SERVER,443,,,,30,Новый ЗащищенноеСоединениеOpenSSL,Ложь);
	headers = Новый Соответствие;
	headers.Вставить("Content-Type",		"application/json;charset=UTF-8");
	headers.Вставить("Authorization",		ПолучитьСтрокуАвторизации(Логин));

	АдресРесурса 	= "/rest/api/3/user/assignable/search?project=%1";
	HTTPЗапрос 		= Новый HTTPЗапрос(СтрШаблон(АдресРесурса,PROJECTID), headers);
	HTTPОтвет 		= HTTPConnection.Получить(HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
		JSONОтветМассив = ПрочитатьJSON(ЧтениеJSON,Истина);
		ЧтениеJSON.Закрыть();
		
		ПользователиПроекта.Очистить();
		Элементы.Заказчик.СписокВыбора.Очистить();
		
		Для каждого ЭлементКоллекции Из JSONОтветМассив Цикл
			
			НовыйПользователь 				= ПользователиПроекта.Добавить();
			НовыйПользователь.accountId 	= ЭлементКоллекции.Получить("accountId");
			НовыйПользователь.displayName 	= ЭлементКоллекции.Получить("displayName");
			НовыйПользователь.isActive 		= ЭлементКоллекции.Получить("active");
			
			Элементы.Заказчик.СписокВыбора.Добавить(
				НовыйПользователь.accountId,
				НовыйПользователь.displayName);
				
		КонецЦикла; 
		
	ИначеЕсли HTTPОтвет.КодСостояния >=400 Тогда	
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ""+HTTPОтвет.ПолучитьТелоКакСтроку();
		Сообщение.Сообщить(); 
		
	КонецЕсли; 
	
	УстановитьДоступныеТипыЗадач();
	УстановитьСпринты();
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСпринты()
	
	HTTPConnection = New HTTPСоединение(ПараметрыАвторизации.SERVER,443,,,,30,Новый ЗащищенноеСоединениеOpenSSL,Ложь);
	headers = Новый Соответствие;
	headers.Вставить("Content-Type",		"application/json;charset=UTF-8");
	headers.Вставить("Authorization",		ПолучитьСтрокуАвторизации(Логин));
	headers.Вставить("Accept",				"application/json");
	
	АдресРесурса 	= "/rest/agile/1.0/board";
	HTTPЗапрос 		= Новый HTTPЗапрос(АдресРесурса, headers);
	HTTPОтвет 		= HTTPConnection.Получить(HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда	
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
		JSONОтвет = ПрочитатьJSON(ЧтениеJSON,Истина);
		ЧтениеJSON.Закрыть();
		
		Если JSONОтвет.Получить("isLast") Тогда			
			
			МассивДосок = JSONОтвет.Получить("values");			
			ДоскиПоискаСпринтов = Новый Соответствие;			
			Для каждого Доска Из МассивДосок Цикл    				
				ДоскиПоискаСпринтов.Вставить(Доска.Получить("id"), Доска.Получить("self"));				
			КонецЦикла;                                                                    		
			
			Для каждого КлючИЗначение Из ДоскиПоискаСпринтов Цикл
				
				АдресРесурсаСпринта = "/rest/agile/1.0/board/{boardId}/sprint?state=active,future";
				АдресРесурсаСпринта = СтрЗаменить(АдресРесурсаСпринта,"{boardId}",КлючИЗначение.Ключ);
				HTTPЗапрос 			= Новый HTTPЗапрос(АдресРесурсаСпринта, headers);
				HTTPОтвет 			= HTTPConnection.Получить(HTTPЗапрос);
				
				Если HTTPОтвет.КодСостояния = 200 Тогда
					
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
					JSONОтветСпринтов = ПрочитатьJSON(ЧтениеJSON,Истина);
					ЧтениеJSON.Закрыть();								
					
					Если Не JSONОтветСпринтов.Получить("isLast") Тогда
						// множественный вызов, не реализовано, если количество активных и будущих спринтов больше чем 50
						//https://developer.atlassian.com/server/confluence/pagination-in-the-rest-api/
					Иначе
						
						values = JSONОтветСпринтов.Получить("values");
						Элементы.Sprint.СписокВыбора.Очистить();
						Для каждого _value Из values Цикл						
							Элементы.Sprint.СписокВыбора.Добавить(Строка(_value.Получить("id")),_value.Получить("name"));							
						КонецЦикла;					
					КонецЕсли;     							
				КонецЕсли;             			
			КонецЦикла;		
		Иначе          			
			//TODO:описать получение всех досок 	
			// множественный вызов, не реализовано, если количество больше чем 50
			//https://developer.atlassian.com/server/confluence/pagination-in-the-rest-api/
		КонецЕсли;                         		
	Иначе                                  		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ""+HTTPОтвет.ПолучитьТелоКакСтроку();
		Сообщение.Сообщить();              	
	КонецЕсли; 	
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступныеТипыЗадач()
	
	HTTPConnection = New HTTPСоединение(ПараметрыАвторизации.SERVER,443,,,,30,Новый ЗащищенноеСоединениеOpenSSL,Ложь);
	headers = Новый Соответствие;
	headers.Вставить("Content-Type",		"application/json;charset=UTF-8");
	headers.Вставить("Authorization",		ПолучитьСтрокуАвторизации(Логин));
	headers.Вставить("Accept",				"application/json");
	
	
	createmeta = "/rest/api/2/issue/createmeta?projectKeys=%1";
	HTTPЗапрос = Новый HTTPЗапрос(СтрШаблон(createmeta,PROJECTID), headers);
	HTTPОтвет = HTTPConnection.Получить(HTTPЗапрос);
	

	Если HTTPОтвет.КодСостояния > 400 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ""+HTTPОтвет.ПолучитьТелоКакСтроку();
		Сообщение.Сообщить(); 
		
		Возврат;
		
	Иначе
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
		JSONОтвет = ПрочитатьJSON(ЧтениеJSON,Истина);
		ЧтениеJSON.Закрыть();	
		
		projects = JSONОтвет.Get("projects");		
		issuetypes = projects[0].Get("issuetypes");
		
		Элементы.ТипЗадачи.СписокВыбора.Очистить();
		Для каждого issuetype Из issuetypes Цикл			
			Элементы.ТипЗадачи.СписокВыбора.Добавить(issuetype.get("id"),issuetype.get("name"));			
		КонецЦикла; 
				
		
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция IssueСтрокой(Знач accountId)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,СтруктураIssue(accountId));
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции //IssueСтрокой

&НаКлиенте
Функция СтруктураIssue(Параметры)

	СтруктураIssue = Новый Структура;
	СтруктураIssue.Вставить("fields", 					Новый Структура); 
	СтруктураIssue.fields.Вставить("summary",			ТемаЗадачи);
	СтруктураIssue.fields.Вставить("description",		ОписаниеЗадачи);
	СтруктураIssue.fields.Вставить("project",			Новый Структура("key", 				PROJECTID));
	СтруктураIssue.fields.Вставить("issuetype", 		Новый Структура("id",				ТипЗадачи));
	СтруктураIssue.fields.Вставить("assignee", 			Новый Структура("accountId",		Параметры.assignee)); // кому назначается
	СтруктураIssue.fields.Вставить("customfield_10073", Новый Структура("accountId",		Параметры.customfield_10073)); // заказчик
	СтруктураIssue.fields.Вставить("customfield_10036", Формат(Период.ДатаНачала,			"ДФ=yyyy-MM-dd")); //дата начала
	СтруктураIssue.fields.Вставить("customfield_10063", Формат(Период.ДатаОкончания,		"ДФ=yyyy-MM-dd")); //дата окончания
	
	Возврат СтруктураIssue;	
КонецФункции //СтруктураIssue

&НаСервере
Функция ПолучитьСтрокуАвторизации(Логин)	
	
	
	КодированнаяСтрока = ПолучитьBase64СтрокуИзДвоичныхДанных(
		ПолучитьДвоичныеДанныеИзСтроки(
			СтрШаблон("%1:%2",ПараметрыАвторизации.LOGIN,ПараметрыАвторизации.TOKEN),
			КодировкаТекста.Системная,
			Истина));	
			
	ПозицияПереноса 	= СтрНайти(КодированнаяСтрока,Символы.ПС);
	КодированнаяСтрока 	= Сред(КодированнаяСтрока,1,ПозицияПереноса-2)
		+ Сред(КодированнаяСтрока,ПозицияПереноса + 1, СтрДлина(КодированнаяСтрока));

	Возврат СтрШаблон("Basic %1",КодированнаяСтрока);
	
КонецФункции


#КонецОбласти